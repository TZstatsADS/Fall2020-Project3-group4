### Step 4: construct a dataframe containing features and label with nrow = length of index
### column bind feature matrix in Step 3 and corresponding features
pairwise_data <- cbind(pairwise_dist_feature, info$label[index])
### add column names
colnames(pairwise_data) <- c(paste("feature", 1:(ncol(pairwise_data)-1), sep = ""), "label")
### convert matrix to data frame
pairwise_data <- as.data.frame(pairwise_data)
### convert label column to factor
pairwise_data$label <- as.factor(pairwise_data$label)
return(feature_df = pairwise_data)
}
#############################################################
### Construct features and responses for training images  ###
#############################################################
feature <- function(input_list = fiducial_pt_list, index){
### Construct process features for training images
### Input: a list of images or fiducial points; index: train index or test index
### Output: a data frame containing: features and a column of label
### here is an example of extracting pairwise distances between fiducial points
### Step 1: Write a function pairwise_dist to calculate pairwise distance of items in a vector
pairwise_dist <- function(vec){
### input: a vector(length n), output: a vector containing pairwise distances(length n(n-1)/2)
return(as.vector(dist(vec)))
}
### Step 2: Write a function pairwise_dist_result to apply function in Step 1 to column of a matrix
pairwise_dist_result <-function(mat){
### input: a n*2 matrix(e.g. fiducial_pt_list[[1]]), output: a vector(length n(n-1))
return(as.vector(apply(mat, 2, pairwise_dist)))
}
### Step 3: Apply function in Step 2 to selected index of input list, output: a feature matrix with ncol = n(n-1) = 78*77 = 6006
pairwise_dist_feature <- t(sapply(input_list[index], pairwise_dist_result))
dim(pairwise_dist_feature)
### Step 4: construct a dataframe containing features and label with nrow = length of index
### column bind feature matrix in Step 3 and corresponding features
pairwise_data <- cbind(pairwise_dist_feature, info$label[index])
### add column names
colnames(pairwise_data) <- c(paste("feature", 1:(ncol(pairwise_data)-1), sep = ""), "label")
### convert matrix to data frame
pairwise_data <- as.data.frame(pairwise_data)
### convert label column to factor
pairwise_data$label <- as.factor(pairwise_data$label)
return(feature_df = pairwise_data)
}
#############################################################
### Construct features and responses for training images  ###
#############################################################
feature <- function(input_list = fiducial_pt_list, index){
### Construct process features for training images
### Input: a list of images or fiducial points; index: train index or test index
### Output: a data frame containing: features and a column of label
### here is an example of extracting pairwise distances between fiducial points
### Step 1: Write a function pairwise_dist to calculate pairwise distance of items in a vector
pairwise_dist <- function(vec){
### input: a vector(length n), output: a vector containing pairwise distances(length n(n-1)/2)
return(as.vector(dist(vec)))
}
### Step 2: Write a function pairwise_dist_result to apply function in Step 1 to column of a matrix
pairwise_dist_result <-function(mat){
### input: a n*2 matrix(e.g. fiducial_pt_list[[1]]), output: a vector(length n(n-1))
return(as.vector(apply(mat, 2, pairwise_dist)))
}
### Step 3: Apply function in Step 2 to selected index of input list, output: a feature matrix with ncol = n(n-1) = 78*77 = 6006
pairwise_dist_feature <- t(sapply(input_list[index], pairwise_dist_result))
dim(pairwise_dist_feature)
### Step 4: construct a dataframe containing features and label with nrow = length of index
### column bind feature matrix in Step 3 and corresponding features
pairwise_data <- cbind(pairwise_dist_feature, 1)
### add column names
colnames(pairwise_data) <- c(paste("feature", 1:(ncol(pairwise_data)-1), sep = ""), "label")
### convert matrix to data frame
pairwise_data <- as.data.frame(pairwise_data)
### convert label column to factor
pairwise_data$label <- as.factor(pairwise_data$label)
return(feature_df = pairwise_data)
}
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(glmnet)
library(WeightedROC)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:2, readMat.matrix)
feature(fiducial_pt_list,1)
#############################################################
### Construct features and responses for training images  ###
#############################################################
feature <- function(input_list = fiducial_pt_list, index){
### Construct process features for training images
### Input: a list of images or fiducial points; index: train index or test index
### Output: a data frame containing: features and a column of label
### here is an example of extracting pairwise distances between fiducial points
### Step 1: Write a function pairwise_dist to calculate pairwise distance of items in a vector
pairwise_dist <- function(vec){
### input: a vector(length n), output: a vector containing pairwise distances(length n(n-1)/2)
return(as.vector(dist(vec)))
}
### Step 2: Write a function pairwise_dist_result to apply function in Step 1 to column of a matrix
pairwise_dist_result <-function(mat){
### input: a n*2 matrix(e.g. fiducial_pt_list[[1]]), output: a vector(length n(n-1))
return(as.vector(apply(mat, 2, pairwise_dist)))
}
pairwise_dist(input_list[index][1])
### Step 3: Apply function in Step 2 to selected index of input list, output: a feature matrix with ncol = n(n-1) = 78*77 = 6006
pairwise_dist_feature <- t(sapply(input_list[index], pairwise_dist_result))
#dim(pairwise_dist_feature)
### Step 4: construct a dataframe containing features and label with nrow = length of index
### column bind feature matrix in Step 3 and corresponding features
pairwise_data <- cbind(pairwise_dist_feature, 1)
### add column names
colnames(pairwise_data) <- c(paste("feature", 1:(ncol(pairwise_data)-1), sep = ""), "label")
### convert matrix to data frame
pairwise_data <- as.data.frame(pairwise_data)
### convert label column to factor
pairwise_data$label <- as.factor(pairwise_data$label)
return(feature_df = pairwise_data)
}
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(glmnet)
library(WeightedROC)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:2, readMat.matrix)
feature(fiducial_pt_list,1)
#############################################################
### Construct features and responses for training images  ###
#############################################################
feature <- function(input_list = fiducial_pt_list, index){
### Construct process features for training images
### Input: a list of images or fiducial points; index: train index or test index
### Output: a data frame containing: features and a column of label
### here is an example of extracting pairwise distances between fiducial points
### Step 1: Write a function pairwise_dist to calculate pairwise distance of items in a vector
pairwise_dist <- function(vec){
### input: a vector(length n), output: a vector containing pairwise distances(length n(n-1)/2)
return(as.vector(dist(vec)))
}
### Step 2: Write a function pairwise_dist_result to apply function in Step 1 to column of a matrix
pairwise_dist_result <-function(mat){
### input: a n*2 matrix(e.g. fiducial_pt_list[[1]]), output: a vector(length n(n-1))
return(as.vector(apply(mat, 2, pairwise_dist)))
}
pairwise_dist(input_list[[index]][1])
### Step 3: Apply function in Step 2 to selected index of input list, output: a feature matrix with ncol = n(n-1) = 78*77 = 6006
pairwise_dist_feature <- t(sapply(input_list[index], pairwise_dist_result))
#dim(pairwise_dist_feature)
### Step 4: construct a dataframe containing features and label with nrow = length of index
### column bind feature matrix in Step 3 and corresponding features
pairwise_data <- cbind(pairwise_dist_feature, 1)
### add column names
colnames(pairwise_data) <- c(paste("feature", 1:(ncol(pairwise_data)-1), sep = ""), "label")
### convert matrix to data frame
pairwise_data <- as.data.frame(pairwise_data)
### convert label column to factor
pairwise_data$label <- as.factor(pairwise_data$label)
return(feature_df = pairwise_data)
}
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(glmnet)
library(WeightedROC)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:2, readMat.matrix)
feature(fiducial_pt_list,1)
#############################################################
### Construct features and responses for training images  ###
#############################################################
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(glmnet)
library(WeightedROC)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:2, readMat.matrix)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:2, readMat.matrix)
### Construct process features for training images
### Input: a list of images or fiducial points; index: train index or test index
### Output: a data frame containing: features and a column of label
### here is an example of extracting pairwise distances between fiducial points
### Step 1: Write a function pairwise_dist to calculate pairwise distance of items in a vector
pairwise_dist <- function(vec){
### input: a vector(length n), output: a vector containing pairwise distances(length n(n-1)/2)
return(as.vector(dist(vec)))
}
pairwise_dist(input_list[1][1])
#############################################################
### Construct features and responses for training images  ###
#############################################################
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(glmnet)
library(WeightedROC)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:2, readMat.matrix)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:2, readMat.matrix)
### Construct process features for training images
### Input: a list of images or fiducial points; index: train index or test index
### Output: a data frame containing: features and a column of label
### here is an example of extracting pairwise distances between fiducial points
### Step 1: Write a function pairwise_dist to calculate pairwise distance of items in a vector
pairwise_dist <- function(vec){
### input: a vector(length n), output: a vector containing pairwise distances(length n(n-1)/2)
return(as.vector(dist(vec)))
}
pairwise_dist(fiducial_pt_list[1][1])
pairwise_dist(fiducial_pt_list[[1]][1])
pairwise_dist(fiducial_pt_list[[1]][1])
#############################################################
### Construct features and responses for training images  ###
#############################################################
if(!require("EBImage")){
install.packages("BiocManager")
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
if(!require("glmnet")){
install.packages("glmnet")
}
if(!require("WeightedROC")){
install.packages("WeightedROC")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
library(glmnet)
library(WeightedROC)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
readMat.matrix <- function(1){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", 1), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:2, readMat.matrix)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
readMat.matrix <- function(1){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", 1), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:2, readMat.matrix)
### Construct process features for training images
### Input: a list of images or fiducial points; 1: train 1 or test 1
### Output: a data frame containing: features and a column of label
### here is an example of extracting pairwise distances between fiducial points
### Step 1: Write a function pairwise_dist to calculate pairwise distance of items in a vector
pairwise_dist <- function(vec){
### input: a vector(length n), output: a vector containing pairwise distances(length n(n-1)/2)
return(as.vector(dist(vec)))
}
### Step 2: Write a function pairwise_dist_result to apply function in Step 1 to column of a matrix
pairwise_dist_result <-function(mat){
### input: a n*2 matrix(e.g. fiducial_pt_list[[1]]), output: a vector(length n(n-1))
return(as.vector(apply(mat, 2, pairwise_dist)))
}
### Step 3: Apply function in Step 2 to selected 1 of input list, output: a feature matrix with ncol = n(n-1) = 78*77 = 6006
pairwise_dist_feature <- t(sapply(fiducial_pt_list[1], pairwise_dist_result))
#dim(pairwise_dist_feature)
pairwise_dist_feature
view(pairwise_dist_feature)
View(pairwise_dist_feature)
View(fiducial_pt_list[[1]])
### Step 4: construct a dataframe containing features and label with nrow = length of 1
### column bind feature matrix in Step 3 and corresponding features
pairwise_data <- cbind(pairwise_dist_feature, 1)
View(pairwise_data)
View(pairwise_data)
### add column names
colnames(pairwise_data) <- c(paste("feature", 1:(ncol(pairwise_data)-1), sep = ""), "label")
View(pairwise_data)
View(pairwise_data)
### convert matrix to data frame
pairwise_data <- as.data.frame(pairwise_data)
View(pairwise_data)
View(pairwise_data)
?glmnet
View(fiducial_pt_list)
View(fiducial_pt_list)
fiducial_pt_list[[1]]
View(pairwise_dist_feature)
View(pairwise_dist_feature)
